require 'test/unit'
require '../impl/resource.rb'
require '../impl/player.rb'
require '../impl/costs.rb'

class TC_player < Test::Unit::TestCase
  
  def test_accepts_resources
    player_to_test = Player.new
    player_to_test.receive(Resource::WOOL, 4)
    player_to_test.receive(Resource::GRAIN, 1)
    player_to_test.receive(Resource::LUMBER, 3)
    expected_resources = Hash.new(0)
    expected_resources[Resource::WOOL] = 4
    expected_resources[Resource::GRAIN] = 1
    expected_resources[Resource::LUMBER] = 3
    assert(player_to_test.resources == expected_resources, 'Unexpected resource found')
  end

  #works only for one-per-resource type things -will *not work for cities
  def check_each_permutation_of_required_resources( required_resources, player_closure )
    #fix this for hashes
    0.upto(required_resources.length-1) do
      player_to_test = Player.new
      0.upto(required_resources.length-2) do |i|
        player_to_test.receive(required_resources[i], 1)
      end
      assert(!player_closure.call(player_to_test), 'Cannot develop without resource type' + required_resources.last.to_s)
      player_to_test.receive(required_resources.last, 1)
      assert(player_closure.call(player_to_test), 'Can develop required resource types')
    end
  end

  def check_resource_permutations_for_build (cost_key, player_closure)
    def required_array = Costs::COSTS[cost_key].to_array
    0.upto(required_array.length-1) do
      player_to_test = Player.new
      0.upto(required_array.length-1) do |i|
      
      end
    end  
  end

  def test_can_develop
    resources_required = [ Resource::WOOL, Resource::ORE, Resource::GRAIN]
    check_each_permutation_of_required_resources( resources_required, lambda {|player| player.can_buy?(Costs::DEV_CARD)}) 
  end

  def test_can_road
    resources_required = [ Resource::BRICK, Resource::LUMBER ]
    check_each_permutation_of_required_resources( resources_required, lambda {|player| player.can_road?}) 
  end

  def test_can_settlement
    resources_required = [ Resource::BRICK, Resource::LUMBER, Resource::GRAIN, Resource::WOOL ]
    check_each_permutation_of_required_resources( resources_required, lambda {|player| player.can_settlement?}) 
  end

  def test_can_ship
    resources_required = [ Resource::WOOL, Resource::LUMBER ]
    check_each_permutation_of_required_resources( resources_required, lambda {|player| player.can_ship?})
  end

end
